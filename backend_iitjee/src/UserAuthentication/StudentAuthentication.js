
const express = require('express');
const bcrypt = require('bcrypt');
const multer = require('multer');
const nodemailer = require('nodemailer');
const mysql = require('mysql2/promise');
const {
  BlobServiceClient,
  StorageSharedKeyCredential,
  generateBlobSASQueryParameters,
  BlobSASPermissions,
  SASProtocol
} = require('@azure/storage-blob');

const router = express.Router();

// Azure Storage Config
const AZURE_STORAGE_ACCOUNT_NAME = 'your_account_name';
const AZURE_STORAGE_ACCOUNT_KEY = 'your_account_key';
const AZURE_CONTAINER_NAME = 'iit-jee-container';
const STUDENT_PHOTO_FOLDER = 'student-data/';

const AZURE_CONNECTION_STRING = 'DefaultEndpointsProtocol=https;AccountName=your_account_name;AccountKey=your_account_key;EndpointSuffix=core.windows.net';

// Azure Upload Function with SAS
const uploadToAzureWithSAS = async (file) => {
  const blobServiceClient = BlobServiceClient.fromConnectionString(AZURE_CONNECTION_STRING);
  const containerClient = blobServiceClient.getContainerClient(AZURE_CONTAINER_NAME);

  const uniqueBlobName = `${STUDENT_PHOTO_FOLDER}${Date.now()}-${file.originalname}`;
  const blockBlobClient = containerClient.getBlockBlobClient(uniqueBlobName);

  await blockBlobClient.uploadData(file.buffer, {
    blobHTTPHeaders: { blobContentType: file.mimetype }
  });

  const sharedKeyCredential = new StorageSharedKeyCredential(
    AZURE_STORAGE_ACCOUNT_NAME,
    AZURE_STORAGE_ACCOUNT_KEY
  );

  const expiresOn = new Date(new Date().valueOf() + 7 * 24 * 60 * 60 * 1000); // 7 days
  const sasToken = generateBlobSASQueryParameters({
    containerName: AZURE_CONTAINER_NAME,
    blobName: uniqueBlobName,
    permissions: BlobSASPermissions.parse("r"),
    startsOn: new Date(),
    expiresOn,
    protocol: SASProtocol.Https,
  }, sharedKeyCredential).toString();

  return `${blockBlobClient.url}?${sasToken}`;
};

// Multer Setup
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// MySQL Database Setup
const db = await mysql.createPool({
  host: 'localhost',
  user: 'root',
  password: 'yourpassword',
  database: 'yourdbname',
});

// Nodemailer Setup
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.GMAIL_USER,
    pass: process.env.GMAIL_PASSWORD,
  },
});


// Password Generator (example)
const generatePassword = () => {
  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  return Array.from({ length: 10 }, () => chars[Math.floor(Math.random() * chars.length)]).join('');
};

// ðŸ“Œ Student Registration API
router.post('/studentRegistration', upload.fields([{ name: 'UploadedPhoto' }]), async (req, res) => {
  const stdRegisterFormData = req.body;
  const files = req.files;

  try {
    const autoGeneratedPassword = generatePassword();
    const hashedPassword = await bcrypt.hash(autoGeneratedPassword, 10);

    const uploadedPhotoSASUrl = files?.UploadedPhoto
      ? await uploadToAzureWithSAS(files.UploadedPhoto[0])
      : null;

    const insertSQL = `
      INSERT INTO iit_student_registration 
      (candidate_name, date_of_birth, gender, category, email_id, confirm_email_id, contact_no, father_name, occupation, mobile_no, line_1, state, districts, pincode, qualifications, college_name, passing_year, marks, uploaded_photo, portal_id, password, password_change_attempts, reset_code) 
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;

    const portalId = `JEE-${Date.now()}`;
    const insertValues = [
      stdRegisterFormData.candidateName,
      stdRegisterFormData.dateOfBirth,
      stdRegisterFormData.Gender,
      stdRegisterFormData.Category,
      stdRegisterFormData.emailId,
      stdRegisterFormData.confirmEmailId,
      stdRegisterFormData.contactNo,
      stdRegisterFormData.fatherName,
      stdRegisterFormData.occupation,
      stdRegisterFormData.mobileNo,
      stdRegisterFormData.line1,
      stdRegisterFormData.state,
      stdRegisterFormData.districts,
      stdRegisterFormData.pincode,
      stdRegisterFormData.qualifications,
      stdRegisterFormData.NameOfCollege,
      stdRegisterFormData.passingYear,
      stdRegisterFormData.marks,
      uploadedPhotoSASUrl,
      portalId,
      hashedPassword,
      0,
      0
    ];

    const [insertResult] = await db.execute(insertSQL, insertValues);
    const studentregistrationId = insertResult.insertId;

    // Confirmation email
    const mailOptions = {
      from: process.env.GMAIL_USER,
      to: stdRegisterFormData.emailId,
      subject: 'Registration Successful',
      text: `Dear ${stdRegisterFormData.candidateName},\n\nYour registration is successful.\n\nHere is your auto-generated password: ${autoGeneratedPassword}\n\nPlease change your password after logging in.\n\nBest regards,\nYour Team`
    };

    await transporter.sendMail(mailOptions);

    res.json({
      success: true,
      message: 'Registration successful. Email sent!',
      studentregistrationId,
      portalId
    });
  } catch (error) {
    console.error('Error during student registration:', error);
    res.status(500).json({
      success: false,
      message: 'Server error during registration',
      error: error.message
    });
  }
});

module.exports = router;

