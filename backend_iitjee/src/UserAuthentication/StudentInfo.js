const express = require("express");
const db = require("../config/database");
// const nodemailer = require("nodemailer");
const bcryptjs = require("bcryptjs");
const sendMail = require("../utils/email");
const router = express.Router();
router.use(express.json());
 
// Function to generate a random password
function generatePassword(length = 6) {
  const charset =
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+";
  let password = "";
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * charset.length);
    password += charset[randomIndex];
  }
  return password;
}
// âœ… GET all students (basic info only)
router.get("/getStudentsInfo", async (req, res) => {
  let connection;
  try {
    connection = await db.getConnection();
    const query = `
      SELECT student_registration_id AS id, candidate_name AS name,
             email_id AS email, contact_no AS mobileNumber, student_activation
      FROM iit_student_registration
    `;
    const [rows] = await connection.query(query);
    res.status(200).json(rows);
  } catch (error) {
    console.error("Error fetching students:", error);
    res.status(500).json({ message: "Error fetching students" });
  } finally {
    if (connection) {
      connection.release(); // Release the connection back to the pool
    }
  }
});// Get all registered students
// âœ… GET full student details including course info
router.get("/getStudentInfo/:studentid", async (req, res) => {
  const studentId = req.params.studentid;
  let connection;
  try {
    connection = await db.getConnection();
      // Define both queries
      const studentQuery = `
      SELECT student_registration_id AS id, candidate_name AS name,
             email_id AS email, contact_no AS mobileNumber, student_activation
      FROM iit_student_registration
      WHERE student_registration_id = ?
    `;
    const [studentRows] = await connection.query(studentQuery, [studentId]);

    if (studentRows.length === 0) {
      return res.status(404).json({ message: "Student not found" });
    }

    const coursesQuery = `
      SELECT course_creation_id AS courseId
      FROM iit_student_buy_courses
      WHERE student_registration_id = ? AND payment_status = 1
    `;
    const [courseRows] = await connection.query(coursesQuery, [studentId]);


    const student = studentRows[0];
    const courses = courseRows.map(row => row.courseId);

    res.status(200).json({ ...student, courses });
  } catch (error) {
    console.error("Error fetching student details:", error);
    res.status(500).json({ message: "Error fetching student details" });
  } finally {
    if (connection) {
      connection.release(); // Release the connection back to the pool
    }
  }
});

// âœ… ðŸ”½ ADD THIS NEW ROUTE BELOW (or above) without replacing the above one
router.get("/coursesName", async (req, res) => {
  let connection;
  try {
    connection = await db.getConnection();
    const query = `SELECT course_creation_id AS id, course_name FROM iit_course_creation_table`;
    const [rows] = await connection.query(query);
 
    console
    res.status(200).json(rows);
  } catch (error) {
    console.error("Error fetching courses:", error);
    res.status(500).json({ message: "Error fetching courses from database" });
  } finally {
    if (connection) {
      connection.release(); // Release the connection back to the pool
    }
  }
});
 
 
// POST route to add student info
router.post("/addStudentByadmin", async (req, res) => {

  const { name, email, mobileNumber, courses = [] } = req.body;
  // console.log("Logging student");
  let connection;
 
  try {
    connection = await db.getConnection();
    const autoGeneratedPassword = generatePassword();
    const hashedPassword = await bcryptjs.hash(autoGeneratedPassword, 10);
    // console.log("Hashed Password:", hashedPassword);
 
    // Check if the email already exists
    const checkEmailQuery =
      "SELECT * FROM iit_student_registration WHERE email_id = ?";
    const emailResult = await connection.query(checkEmailQuery, [email]);
 
    // If the email exists, return an error
    if (emailResult[0] && emailResult[0].length > 0) {
      return res.status(400).json({
        error: "Email already exists",
      });
    }
 
  
    const insertQuery =
      "INSERT INTO iit_student_registration (candidate_name, email_id, contact_no, password,student_activation) VALUES (?, ?, ?, ?,1)";
 
    const [result] = await connection.query(insertQuery, [
      name,
      email,
      mobileNumber,
      hashedPassword,
    ]);
    const studentId = result.insertId;
 
    // Insert course selections
    for (const courseId of courses) {
      await connection.query(
        `INSERT INTO iit_student_buy_courses (student_registration_id, course_creation_id, transaction_status,user_purchased_time,payment_status)
         VALUES (?, ?, ?,NOW(),?)`,
        [studentId, courseId, "Addedbyadmin",1]
      );
    }
 
    
 
    // Send email after successful registration
    setImmediate(() => {
      const registrationText = `Dear ${name},\n\nYour registration is successful. Here is your auto-generated password: ${autoGeneratedPassword}\n\nPlease change your password after logging in for the first time.\n\nBest regards,\nYour Team`;
      // console.log("Sending email to:", email);
      sendMail(email, "Registration Successful", registrationText); // Send email asynchronously
    });
 
    res.status(200).json({
      message: "Student registered successfully. Email sent!",
      id: studentId,
      name: name,
      email: email,
      mobileNumber: mobileNumber,
      password: autoGeneratedPassword,
      selectedCourses: courses,
    });
  } catch (error) {
    console.error("Error:", error); // Log the error for debugging
    res.status(500).json({ error: "Database query failed" });
  } finally {
    if (connection) {
      connection.release(); // Ensure the connection is released even on error
    }
  }
});
router.put("/togglestudentstatus/:studentid", async (req, res) => {
  const studentId = req.params.studentid;
  const { student_activation } = req.body; // Expecting a boolean value

  let connection;
  try {
    connection = await db.getConnection(); // <-- Remove "const" from here

    // Update student activation status
    const updateQuery = `
      UPDATE iit_student_registration
      SET student_activation = ?
      WHERE student_registration_id = ?
    `;
    await connection.query(updateQuery, [student_activation, studentId]);

    res.status(200).json({ message: "Student status updated successfully." });

  } catch (error) {
    console.error("Error updating student status:", error);
    res.status(500).json({ message: "Error updating student status." });

  } finally {
    if (connection) {
      connection.release();
    }
  }
});

// Update student details
router.put("/updateStudentInfo/:studentid", async (req, res) => {
  const studentId = req.params.studentid;
  const { name, email, mobileNumber, student_activation, courses = [] } = req.body;

  const connection = await db.getConnection();
  try {
    await connection.beginTransaction();

    // Update student basic info
    const updateStudentQuery = `
      UPDATE iit_student_registration
      SET candidate_name = ?, email_id = ?, contact_no = ?, student_activation = ?
      WHERE student_registration_id = ?
    `;
    await connection.query(updateStudentQuery, [
      name,
      email,
      mobileNumber,
      student_activation,
      studentId,
    ]);

    // Remove old course mappings
    const deleteCoursesQuery = `
      DELETE FROM iit_student_buy_courses
      WHERE student_registration_id = ?
    `;
    await connection.query(deleteCoursesQuery, [studentId]);

    // Insert new course mappings
    const insertCourseQuery = `
      INSERT INTO iit_student_buy_courses (student_registration_id, course_creation_id, transaction_status, user_purchased_time,payment_status)
      VALUES (?, ?, "Addedbyadmin", NOW(),1)
    `;
    for (const courseId of courses) {
      await connection.query(insertCourseQuery, [studentId, courseId]);
    }

    await connection.commit();
    res.status(200).json({ message: "Student info and courses updated successfully." });

  } catch (error) {
    await connection.rollback();
    console.error("Error updating student and courses:", error);
    res.status(500).json({ message: "Error updating student and courses." });
  } finally {
    connection.release();
  }
});

 
module.exports = router;